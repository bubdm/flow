<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mchnry.Flow</name>
    </assembly>
    <members>
        <member name="T:Mchnry.Flow.Analysis.Sanitizer">
            <summary>
            Utility used to Sanitize a workflow definition
            </summary>
            <remarks>
            <list type="bullet">
            <item>This is used to </item>
            </list>
            </remarks>
        </member>
        <member name="T:Mchnry.Flow.IActionBuilder`1">
            <summary>
            Fluent Builder Interface for defining an action to be executed in a flow.
            </summary>
            <typeparam name="T">Type of model used in flow.</typeparam>
        </member>
        <member name="M:Mchnry.Flow.IActionBuilder`1.DoWithContext(Mchnry.Flow.Work.IAction{`0},System.Action{Mchnry.Flow.ContextBuilder})">
            <summary>
            Define an action to be executed with context.
            </summary>
            <param name="action">Implementation of <see cref="T:Mchnry.Flow.Work.IAction`1"/></param>
            <param name="context">Contextual parameter as defined by Action</param>
        </member>
        <member name="M:Mchnry.Flow.IActionBuilder`1.Do(Mchnry.Flow.Work.IAction{`0})">
            <summary>
            Define an action to be executed with context.
            </summary>
            <param name="action">Implementation of <see cref="T:Mchnry.Flow.Work.IAction`1"/></param>
        </member>
        <member name="M:Mchnry.Flow.IActionBuilder`1.DoInLine(System.String,System.String,System.Action{Mchnry.Flow.ContextBuilder},System.Func{Mchnry.Flow.IEngineScope{`0},Mchnry.Flow.Diagnostics.IEngineTrace,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Do an inline action
            </summary>
            <param name="actionName">Name of action</param>
            <param name="action">Func to do</param>
        </member>
        <member name="T:Mchnry.Flow.ActionBuilder`1">
            <summary>
            Generic Implementation of <see cref="T:Mchnry.Flow.IActionBuilder`1"/>
            </summary>
            <typeparam name="T">Type of model class used in flow</typeparam>
        </member>
        <member name="T:Mchnry.Flow.IRuleConditionBuilder">
            <summary>
            Fluent Interface for defining the true condition for the defined implementation of <see cref="T:Mchnry.Flow.Logic.IRuleEvaluator`1"/>
            </summary>
        </member>
        <member name="M:Mchnry.Flow.IRuleConditionBuilder.IsTrue">
            <summary>
            The rule will return true if the evaluator returns true.
            </summary>
        </member>
        <member name="M:Mchnry.Flow.IRuleConditionBuilder.IsFalse">
            <summary>
            The rule will return true if the evaluator returns false.
            </summary>
        </member>
        <member name="M:Mchnry.Flow.IRuleConditionBuilder.Is(System.Boolean)">
            <summary>
            The rule will return true if the evaluator returns the value provided.
            </summary>
            <param name="condition">The true condition of the rule.</param>
        </member>
        <member name="T:Mchnry.Flow.IRuleBuilder`1">
            <summary>
            Fluent Interface for defining a rule.
            </summary>
            <typeparam name="T">Type of model used in flow.</typeparam>
        </member>
        <member name="M:Mchnry.Flow.IRuleBuilder`1.Eval(Mchnry.Flow.Logic.IRuleEvaluator{`0})">
            <summary>
            Defines the rule that queries an <see cref="T:Mchnry.Flow.Logic.IRuleEvaluator`1"/>
            </summary>
            <param name="evaluator">Implementation of <see cref="T:Mchnry.Flow.Logic.IRule`1"/> to query</param>
            <returns>Reference as <see cref="T:Mchnry.Flow.IRuleConditionBuilder"/> to indicate the true condition of evaluator.</returns>
        </member>
        <member name="M:Mchnry.Flow.IRuleBuilder`1.EvalWithContext(Mchnry.Flow.Logic.IRuleEvaluator{`0},System.Action{Mchnry.Flow.ContextBuilder})">
            <summary>
            Defines the rule that queries an <see cref="T:Mchnry.Flow.Logic.IRuleEvaluator`1"/>
            </summary>
            <param name="evaluator">Implementation of <see cref="T:Mchnry.Flow.Logic.IRule`1"/> to query</param>
            <param name="context">The context to pass to the evaluator.</param>
            <returns>Reference as <see cref="T:Mchnry.Flow.IRuleConditionBuilder"/> to indicate the true condition of evaluator.</returns>
        </member>
        <member name="M:Mchnry.Flow.IRuleBuilder`1.EvalInLine(System.String,System.String,System.Action{Mchnry.Flow.ContextBuilder},System.Func{Mchnry.Flow.IEngineScope{`0},Mchnry.Flow.Diagnostics.IEngineTrace,Mchnry.Flow.IRuleResult,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Evaluate inline evaluator function
            </summary>
            <param name="evaluatorName">Name of evaluator</param>
            <param name="evaluator">Func to evaluate</param>
            <returns></returns>
        </member>
        <member name="T:Mchnry.Flow.RuleBuilder`1">
            <summary>
            Implementation of <see cref="T:Mchnry.Flow.IRuleBuilder`1"/> and <see cref="T:Mchnry.Flow.IRuleConditionBuilder"/> for defining a rule.
            </summary>
            <typeparam name="T">Type of model used in flow.</typeparam>
        </member>
        <member name="T:Mchnry.Flow.IFluentActivityBuilder`1">
            <summary>
            Interface for fluent activity builder.
            </summary>
            <typeparam name="T">Type of model used in flow</typeparam>
        </member>
        <member name="M:Mchnry.Flow.IFluentActivityBuilder`1.Do(System.Action{Mchnry.Flow.IActionBuilder{`0}})">
            <summary>
            Execute the provided implementation of <see cref="T:Mchnry.Flow.IActionBuilder`1"/>
            </summary>
            <param name="Do">Implementation of IActionBuilder</param>
            <returns><see cref="T:Mchnry.Flow.IFluentActivityBuilder`1"/></returns>
        </member>
        <member name="M:Mchnry.Flow.IFluentActivityBuilder`1.Chain(Mchnry.Flow.Work.IWorkflowBuilder{`0})">
            <summary>
            Chains another workflow to be executed as defined by this workflow.
            </summary>
            <remarks>
            <list type="bullet">
            <item>The chained workflow must use the same type of model.  Alternatively, can provide
            and implementation if <see cref="T:Mchnry.Flow.Work.IAction`1"/> which uses scope to call another workflow of a different model type</item>
            </list>
            </remarks>
            <param name="builder">Implementation of <see cref="T:Mchnry.Flow.Work.IWorkflowBuilder`1"/></param>
            <returns><see cref="T:Mchnry.Flow.IFluentActivityBuilder`1"/></returns>
        </member>
        <member name="M:Mchnry.Flow.IFluentActivityBuilder`1.DoNothing">
            <summary>
            Placeholder for use while building a flow. This allows for the definition and linting of a flow
            before developing the actions.
            </summary>
            <returns><see cref="T:Mchnry.Flow.IFluentActivityBuilder`1"/></returns>
        </member>
        <member name="M:Mchnry.Flow.IFluentActivityBuilder`1.IfThenDo(System.Action{Mchnry.Flow.IFluentExpressionBuilder{`0}},System.Action{Mchnry.Flow.IFluentActivityBuilder{`0}})">
            <summary>
            Builder for creating a condition reaction in an activity
            </summary>
            <param name="If">Implementation of <see cref="T:Mchnry.Flow.IFluentExpressionBuilder`1"/> for defining rule expression</param>
            <param name="Then">Implementation of <see cref="T:Mchnry.Flow.IFluentActivityBuilder`1"/> for defining action</param>
            <returns><see cref="T:Mchnry.Flow.IFluentElseActivityBuilder`1"/> ElseBuilder for quickly defining an else reaction</returns>
        </member>
        <member name="T:Mchnry.Flow.IFluentElseActivityBuilder`1">
            <summary>
            Fluent Interface for builing an activity. 
            </summary>
            <typeparam name="T">Type of model used in flow</typeparam>
        </member>
        <member name="M:Mchnry.Flow.IFluentElseActivityBuilder`1.Do(System.Action{Mchnry.Flow.IActionBuilder{`0}})">
            <summary>
            Execute the provided implementation of <see cref="T:Mchnry.Flow.IActionBuilder`1"/>
            </summary>
            <param name="Do">Implementation of IActionBuilder</param>
            <returns><see cref="T:Mchnry.Flow.IFluentActivityBuilder`1"/></returns>
        </member>
        <member name="M:Mchnry.Flow.IFluentElseActivityBuilder`1.Chain(Mchnry.Flow.Work.IWorkflowBuilder{`0})">
            <summary>
            Chains another workflow to be executed as defined by this workflow.
            </summary>
            <remarks>
            <list type="bullet">
            <item>The chained workflow must use the same type of model.  Alternatively, can provide
            and implementation if <see cref="T:Mchnry.Flow.Work.IAction`1"/> which uses scope to call another workflow of a different model type</item>
            </list>
            </remarks>
            <param name="builder">Implementation of <see cref="T:Mchnry.Flow.Work.IWorkflowBuilder`1"/></param>
            <returns><see cref="T:Mchnry.Flow.IFluentActivityBuilder`1"/></returns>
        </member>
        <member name="M:Mchnry.Flow.IFluentElseActivityBuilder`1.IfThenDo(System.Action{Mchnry.Flow.IFluentExpressionBuilder{`0}},System.Action{Mchnry.Flow.IFluentActivityBuilder{`0}})">
            <summary>
            Builder for creating a condition reaction in an activity
            </summary>
            <param name="If">Implementation of <see cref="T:Mchnry.Flow.IFluentExpressionBuilder`1"/> for defining rule expression</param>
            <param name="Then">Implementation of <see cref="T:Mchnry.Flow.IFluentActivityBuilder`1"/> for defining action</param>
            <returns><see cref="T:Mchnry.Flow.IFluentElseActivityBuilder`1"/> ElseBuilder for quickly defining an else reaction</returns>
        </member>
        <member name="M:Mchnry.Flow.IFluentElseActivityBuilder`1.Else(System.Action{Mchnry.Flow.IFluentActivityBuilder{`0}})">
            <summary>
            Defines the activity to execute if the prior activitie's condition evaluaed to false
            </summary>
            <param name="Then">Implementation of <see cref="T:Mchnry.Flow.IFluentActivityBuilder`1"/> to run</param>
            <returns></returns>
        </member>
        <member name="T:Mchnry.Flow.IFluentExpressionBuilder`1">
            <summary>
            Fluent Interface for defining a rule expression.
            </summary>
            <typeparam name="T">Type of model used in flow.</typeparam>
        </member>
        <member name="M:Mchnry.Flow.IFluentExpressionBuilder`1.Rule(System.Action{Mchnry.Flow.IRuleBuilder{`0}})">
            <summary>
            Defines a rule
            </summary>
            <param name="rule">Implementation of <see cref="T:Mchnry.Flow.Logic.IRule`1"/></param>
        </member>
        <member name="M:Mchnry.Flow.IFluentExpressionBuilder`1.ExpIsTrue(System.Action{Mchnry.Flow.IFluentExpressionBuilder{`0}})">
            <summary>
            Defines a rule where the result of the Expression defined by implementation of <see cref="T:Mchnry.Flow.IFluentExpressionBuilder`1"/> must be true.
            </summary>
            <param name="If">Implementation of <see cref="T:Mchnry.Flow.IFluentExpressionBuilder`1"/></param>
        </member>
        <member name="M:Mchnry.Flow.IFluentExpressionBuilder`1.ExpIsFalse(System.Action{Mchnry.Flow.IFluentExpressionBuilder{`0}})">
            <summary>
            Defines a rule where the result of the Expression defined by implementation of <see cref="T:Mchnry.Flow.IFluentExpressionBuilder`1"/> must be false.
            </summary>
            <param name="If">Implementation of <see cref="T:Mchnry.Flow.IFluentExpressionBuilder`1"/></param>
        </member>
        <member name="M:Mchnry.Flow.IFluentExpressionBuilder`1.And(System.Action{Mchnry.Flow.IFluentExpressionBuilder{`0}},System.Action{Mchnry.Flow.IFluentExpressionBuilder{`0}})">
            <summary>
            Defines an expression where the results of the first and second expressions must both be true.
            </summary>
            <param name="first">Implementation of <see cref="T:Mchnry.Flow.IFluentExpressionBuilder`1"/></param>
            <param name="second">Implementation of <see cref="T:Mchnry.Flow.IFluentExpressionBuilder`1"/></param>
        </member>
        <member name="M:Mchnry.Flow.IFluentExpressionBuilder`1.Or(System.Action{Mchnry.Flow.IFluentExpressionBuilder{`0}},System.Action{Mchnry.Flow.IFluentExpressionBuilder{`0}})">
            <summary>
            Defines an expression where at least one of the results of the first and second expressions must be true.
            </summary>
            <param name="first">Implementation of <see cref="T:Mchnry.Flow.IFluentExpressionBuilder`1"/></param>
            <param name="second">Implementation of <see cref="T:Mchnry.Flow.IFluentExpressionBuilder`1"/></param>
        </member>
        <member name="T:Mchnry.Flow.IBuilder`1">
            <summary>
            Interface for building a flow.
            </summary>
            <typeparam name="T">Type of model used in flow.</typeparam>
        </member>
        <member name="M:Mchnry.Flow.IBuilder`1.BuildFluent(System.Action{Mchnry.Flow.IFluentActivityBuilder{`0}})">
            <summary>
            Fluent Builder
            </summary>
            <param name="Activity"></param>
            <returns></returns>
        </member>
        <member name="M:Mchnry.Flow.Engine`1.#ctor(Mchnry.Flow.Configuration.Config)">
            <summary>
            engine construcor
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            internal so that caller follows fluent construction 
            starting with <see cref="!:CreateEngine(WorkDefine.Workflow)"/>
            </item>
            </list>
            </remarks>
            <param name="workFlow">workflow definition</param>
        </member>
        <member name="T:Mchnry.Flow.IRuleResult">
            <summary>
            Passed to RuleEvaluator Implementations so that the 
            implementation can report its result to the engine.
            </summary>
        </member>
        <member name="M:Mchnry.Flow.IRuleResult.Fail">
            <summary>
            The result of the evaluation is false.
            </summary>
        </member>
        <member name="M:Mchnry.Flow.IRuleResult.FailWithValidation(Mchnry.Flow.Validation)">
            <summary>
            the result of the evaluation is false.
            </summary>
            <param name="validation">A validation to return to the caller.</param>
        </member>
        <member name="M:Mchnry.Flow.IRuleResult.Pass">
            <summary>
            the result of the evaluation is true.
            </summary>
        </member>
        <member name="M:Mchnry.Flow.IRuleResult.SetResult(System.Boolean)">
            <summary>
            manually set the result of the evaluation.
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Mchnry.Flow.ConventionMisMatchException">
            <summary>
            exception thrown if engine encounters any issue with naming conventions
            </summary>
        </member>
        <member name="F:Mchnry.Flow.CacheScopeOptions.Global">
            <summary>
            items in global scope are available to all workflows/actions/evaluators
            </summary>
        </member>
        <member name="F:Mchnry.Flow.CacheScopeOptions.Activity">
            <summary>
            items in activity scope are only available to actions/evaluators within the current running activity
            </summary>
        </member>
        <member name="F:Mchnry.Flow.CacheScopeOptions.Workflow">
            <summary>
            items in workflow scope are available to all actions/evaluators in the workflow
            </summary>
        </member>
        <member name="M:Mchnry.Flow.ValidationOverride.#ctor(System.String,System.String,System.String)">
            <summary>
            Internal constructor for ValidationOverride
            </summary>
            <remarks><list type="bullet">
            <item>Instance can only be constructed by calling <see cref="M:Mchnry.Flow.Validation.CreateOverride(System.String,System.String)">Validation.CreateOverride</see></item>
            </list></remarks>
            <param name="key">References the unique id of the <see cref="T:Mchnry.Flow.Validation">Validation</see> in the instance of <see cref="T:Mchnry.Flow.IValidationContainer"/></param>
            <param name="comment">Optionally provided by the calling system when overriding.  Can be user comments captured in UI, or static provided by caller.</param>
            <param name="auditCode">Optional code provided by consuming system to reference some system specific logging entry where this overrride is recorded</param>
        </member>
        <member name="P:Mchnry.Flow.ValidationOverride.Key">
            <summary>
            References the unique identifier of the <see cref="T:Mchnry.Flow.Validation">Validation</see> that this overrides.
            </summary>
        </member>
        <member name="P:Mchnry.Flow.ValidationOverride.Comment">
            <summary>
            Optionally provided by the calling system when overriding.  Can be user comments captured in UI, or static provided by caller.
            </summary>
        </member>
        <member name="P:Mchnry.Flow.ValidationOverride.AuditCode">
            <summary>
            Optional code provided by consuming system to reference some system specific logging entry where this overrride is recorded
            </summary>
        </member>
        <member name="P:Mchnry.Flow.ValidationOverride.Redeemed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mchnry.Flow.ValidationSeverity.Confirm">
            <summary>
            Alerts the calling system that a confirmation is needed. 
            </summary>
        </member>
        <member name="F:Mchnry.Flow.ValidationSeverity.Escalate">
            <summary>
            Similar to Confirm, but advises the calling system that the confirmation should be
            provided by someone with escalated permissions
            </summary>
        </member>
        <member name="F:Mchnry.Flow.ValidationSeverity.Fatal">
            <summary>
            Alerts the calling system of a stop-condition that must be fixed.
            </summary>
        </member>
    </members>
</doc>
